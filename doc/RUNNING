Запуск POS на QEMU
-----------------------
> cd ../run
> phantom_clean


Отладка на всех платформах
--------------------------
- запустите ядро в qemu, как указано выше
- cd trunk/oldtree/kernel/phantom
- запустите run gdb (arm-elf-gdb/mips-elf-gdb)
- он выполнит .gdbinit и подключится к запущенному ядру
- если вам нужно настроить gdb в соответствии с вашими потребностями, создайте/измените .gdb-local (по какой-то причине не работает на arm)


Запуск POS на Intel 32
---------------------------
Ядро POS на ia32 - это обычное ядро GRUB. Подойдет любая установка GRUB. 
Примеры смотрите в run/fat/boot/menu.lst.

Для запуска POS понадобятся еще две вещи: собственный раздел и начальные классы виртуальной машины.

Раздел может быть создан с помощью программ для создания разделов Unix и должен иметь
тип 0xD3. Смотрите run/zero_ph_img.sh - он создает файл phantom.img, который
вам нужно будет добавить в созданный раздел, чтобы отформатировать его.

Или просто сделайте:

> dd conv=notrunc bs=4096 count=1 seek=16 if=img/phantom.суперблок=/dev/...

Предоставление POS начальных классов может быть выполнено двумя способами:

1. загрузочный модуль 'classes'. Смотрите, например, menu.lst выше. пакет classes
находится в run/fat/boot.

2. каталог /class на первом доступном разделе FAT. Скопируйте plib/bin/*.pc
содержимое в этот каталог.

Обратите внимание, что в обоих случаях классы загружаются только при первом запуске
ядра - после моментального снимка все загруженные классы замораживаются в snap.


Запуск POS на ARM/MIPS
---------------------------
Порты ARM и MIPS еще не завершены. Включите соответствующий ARCH в
local-config.mk,  "make clean all". Смотрите run/run_arm.cmd и run/run_mips.cmd
для запуска в QEMU. Оба ядра рано или поздно умрут. Мы приглашаем вас
помочь с этими портами.


Запуск POS на Intel 64
---------------------------
Этот порт не генерирует загрузочный код.


Запуск POS на Elbrus2K
---------------------------
Этот порт не генерирует загрузочный код.
